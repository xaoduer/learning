Docker自动获取系统变量配置文件:D:\projects-spring\msa\msa-integration\assembly\src\etc\dockerfile\

命令:
docker create # 创建一个容器但是不启动它
docker run # 创建并启动一个容器
docker stop # 停止容器运行，发送信号SIGTERM
docker start # 启动一个停止状态的容器
docker restart # 重启一个容器
docker rm # 删除一个容器
docker kill # 发送信号给容器，默认SIGKILL
docker attach # 连接(进入)到一个正在运行的容器
docker wait # 阻塞到一个容器，直到容器停止运行

获取容器相关信息
docker ps # 显示状态为运行（Up）的容器
docker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)
docker inspect # 深入容器内部获取容器所有信息
docker logs # 查看容器的日志(stdout/stderr)
docker events # 得到docker服务器的实时的事件
docker port # 显示容器的端口映射
docker top # 显示容器的进程信息
docker diff # 显示容器文件系统的前后变化
导出容器
docker cp # 从容器里向外拷贝文件或目录
docker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息

docker exec # 在容器里执行一个命令，可以执行bash进入交互式

镜像操作
docker images # 显示本地所有的镜像列表
docker import # 从一个tar包创建一个镜像，往往和export结合使用
docker build # 使用Dockerfile创建镜像（推荐）
docker commit # 从容器创建镜像
docker rmi # 删除一个镜像
docker load # 从一个tar包创建一个镜像，和save配合使用
docker save # 将一个镜像保存为一个tar包，带layers和tag信息
docker history # 显示生成一个镜像的历史命令
docker tag # 为镜像起一个别名

镜像仓库(registry)操作
docker login # 登录到一个registry
docker search # 从registry仓库搜索镜像
docker pull # 从仓库下载镜像到本地
docker push # 将一个镜像push到registry仓库中

获取Container IP地址（Container状态必须是Up）
docker inspect id | grep IPAddress | cut -d '"' -f 4
获取端口映射
docker inspect -f '{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' id
获取环境变量
docker exec container_id env
杀掉所有正在运行的容器
docker kill $(docker ps -q)
删除老的(一周前创建)容器
docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm
删除已经停止的容器
docker rm `docker ps -a -q`
删除所有镜像，小心
docker rmi $(docker images -q)

Dockerfile最佳实践
尽量将一些常用不变的指令放到前面
CMD和ENTRYPOINT尽量使用json数组方式
通过Dockerfile构建image
docker build csphere/nginx:1.7 .
镜像仓库Registry
镜像从Dockerfile build生成后，需要将镜像推送(push)到镜像仓库。企业内部都需要构建一个私有docker registry，这个registry可以看作二进制的scm，CI/CD也需要围绕registry进行。

部署registry
mkdir /registry
docker run  -p 80:5000  -e STORAGE_PATH=/registry  -v /registry:/registry  registry:2.0
推送镜像保存到仓库
假设192.168.1.2是registry仓库的地址：

docker tag  csphere/nginx:1.7 192.168.1.2/csphere/nginx:1.7
docker push 192.168.1.2/csphere/nginx:1.7

docker logs -f 7a38a1ad55c6
docker stop determined_swanson  
docker start determined_swanson
docker rm determined_swanson  

查看Container的IP地址
docker inspect <container name or id>| grep IPAddress

查看Container的映射的端口
docker port <container name or id>
eg.
docker port d8dac7399647
docker port hfq-jedi-zxf-eden

用iptables查看容器映射情况
iptables -t nat -nvL
iptables -t nat -nvL --line-number

eg.
iptables -t nat -nvL | grep 8761
sudo iptables -t nat -nvL POSTROUTING

检查宿主机Linux网络转发是否打开: 
sudo sysctl net.ipv4.ip_forward
sudo sysctl -w net.ipv4.ip_forward=1
或docker 启动时 --ip-forward=true

构建
1.touch Dockerfile
2.添加Dockerfile内容
3.docker build 构建镜像
docker build -t docker-duyl-test/zenap-kafka:0.0.1 .

测试
1.启动镜像
docker run -d -p 8761:8080 docker-duyl-test/zenap-kafka:0.0.1
docker run -d -P docker-duyl-test/zenap-kafka:0.0.1
2.访问Docker宿主机ip:8761即可

docker ps | grep kafka

docker exec -ti 69b1ff5e9e08 /bin/sh

ps -ef | grep java



paas平台的docker 内存
cat memory.stat 
  [root@node-9:/sys/fs/cgroup/memory/docker/ab0d5918ac93a34e5e37c0e02ee66a72723364c62f73b36d10e533a1d5608952]$ cat memory.stat
  cache 11423744
  rss 500461568
  rss_huge 421527552
  mapped_file 0
  swap 0
  pgpgin 107856
  pgpgout 85595
  pgfault 458798
  pgmajfault 0
  inactive_anon 0
  active_anon 500461568
  inactive_file 20480
  active_file 11403264
  unevictable 0
  hierarchical_memory_limit 999997440     ||  cat memory.limit_in_bytes  最大内存总量
  hierarchical_memsw_limit 1999998976
  total_cache 11423744
  total_rss 500461568
  total_rss_huge 421527552
  total_mapped_file 0
  total_swap 0
  total_pgpgin 107856
  total_pgpgout 85595
  total_pgfault 458798
  total_pgmajfault 0
  total_inactive_anon 0
  total_active_anon 500461568
  total_inactive_file 20480
  total_active_file 11403264
  total_unevictable 0

memory.usage_in_bytes	已使用的内存量(包含cache和buffer)(字节)，相当于linux的used_meme
memory.limit_in_bytes	限制的内存总量(字节)，相当于linux的total_mem
memory.failcnt	申请内存失败次数计数
memory.memsw.usage_in_bytes	已使用的内存和swap(字节)
memory.memsw.limit_in_bytes	限制的内存和swap容量(字节)
memory.memsw.failcnt	申请内存和swap失败次数计数
memory.stat	内存相关状态

apk : http://10.89.208.228:80
echo http://10.89.208.228:80/alpine/v3.8/main > /etc/apk/repositories \
echo http://10.89.208.228:80/alpine/v3.8/community  >> /etc/apk/repositories
